- React apps are made out of components. A component is a piece of User Interface (UI) that has it's own logic and appearance.

- React components are JavaScript functions that return markup:

function MyButton() {
  return(
  <button> I'm a button </button> 
  );
}

Now, that you've declared MyButton we can nest it into another component.

export default function MyApp(){    // The export default keywords specify the main component in the file.
  return(
  <div>
    <h1>Hello world! </h1>
    <MyButton/>                    //Notice that MyButton starts with Capital Letter. That's how you know it's a React component.
  </div>
  );
}

#What is JSX?#

  JavaScriptXML is a syntax extension for JavaScript commonly used with React to describe what UI should look like.
  You can use '{}' to escape into JavaScript.

#Adding styles#

  In react, you specify your CSS class with className. It works the same way as the HTML class atribute:
<img className="newImage" />
  Then, you write the CSS rules in a separate file:
  .newImage {
    width:200px;
  }

#Example of code#

const user = {
name = 'Maria',
imageUrl = 'https:google.com.br',
imageSize: 90,
};

export default functionProfile(){
  return(
    <>                            //The <> is called a Fragment. Special syntax used to group a multiple elements whithout adding an extra HTML element to the DOM.
      <h1> {user.name} </h1>      //It helps avoid unnecessary wrapper <div> tags in the output.
      <img 
        className = "newImage"
        src = {user.imageUrl}
        alt{'Photo of' + user.name}
        style={{                  
        width: user.imageSize;
        height: user.imageSize;
        }}
      />
    </>
  );
}

#Conditional Rendering#

let content;
if(isLoggedIn){
  content = <AdminPanel />;
}
else{
  content = <LoginForm />;
}
return (
  <div>
  {content}
  </div>
);

You always can use the conditional ? operator if you prefer more compact code:

<div>
  {isLoggedIn ? (<AdminPanel />) : (<LoginForm />)}
</div>

#Rendering Lists#

Array of products:

const products = [
  { title: 'Cabagge', id: 1 },
  { title: 'Garlic', id: 2 },
  { title: 'Apple', id: 3 },
];

--> Inside your component, use the map() function to transform an array of products into an array of <li> items:

const listItems = products.map(product => 
  <li key={product.id}>         //Notice how li has a key attribute. For each item in a list, you should pass a string or a number that uniquely 
    {product.title}             //identifies that item among its siblings. Usually, a key should be comming from your Data, such as a database ID.
  </li>
);
return(
  <ul>{listItems}</ul>
);

--------------------------------------------------------------
const products = [
  { name: 'Cabagge', isFruit: fase, id: 1 },
  { name: 'Orange', isFruit: true, id: 2 ),
  { name: 'Apple', isFruit: true, id: 3 ),
];

export default function ShoppingList() {
const listItems = products.map(product =>
  <li key{product.id} style{{color: product.isFruit ? 'magenta' : 'green' }} >
    {product.name}
  </li>
  return(
    <ul> {listItems} </ul>
  );
}

#Updating the Screen#

import { useState } from 'react'

export default function MyApp(){
  return(
    <div>
      <h1>Counters that update separately</h1>
      <MyButton />
      <MyButton />
    </div>
  );
}

function MyButton(){
  const [count, setCount] = useState(0);
  function HandleClick(){
    setCount(count + 1);
  }
  return(
    <button onClick{HandleClick}>
    Clicked {count} times
    </button>
  );
}

#USING HOOKS#

--> Functions starting with use, like useState, are called Hooks. Hooks are functions that let you use React Features in functional components.
Prior to hooks, state and lifecycle methods could only be used in class components, but with hooks, you can use these features in functional components as well, which are
simplier and easier to work with. The idea is to make your components more modular and reusable without having to rely on class components.
--> Hooks are more restrictive than other functions. You can only call hooks at the top of your components. This means you cannot call hooks inside loops, conditional or nested functions.

#SHARING DATA BETWEEN COMPONENTS#

import {useState} from 'react'

export default function MyApp(){
  const [count, setCount] = useState(0);
  function handleClick(){
    setCount(count + 1);
  }
  return(
    <div>
      <h1>Counters that update together</h1>
      <MyButton count={count} onClick={handleClick} />
      <MyButton count={count} onClick={handleClick} />
    </div>
  );
}

function MyButton (count, onClick) {
  return(
    <button onClick={onClick}>
    Clicked {count} times
    </button>
  );
}































